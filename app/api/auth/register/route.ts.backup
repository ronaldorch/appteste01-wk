// For√ßar uso do Node.js runtime
export const runtime = "nodejs"

import { type NextRequest, NextResponse } from "next/server"

const USE_DATABASE = process.env.DB_HOST && process.env.DB_HOST !== "localhost"

// Simula√ß√£o de armazenamento em mem√≥ria (para desenvolvimento)
const memoryUsers: any[] = [
  {
    id: 1,
    name: "Usu√°rio Demo",
    email: "demo@exemplo.com",
    password: "123456",
  },
  {
    id: 2,
    name: "Admin Sistema",
    email: "admin@sistema.com",
    password: "admin123",
  },
]

export async function POST(request: NextRequest) {
  try {
    console.log("üìù Iniciando registro de usu√°rio...")

    const body = await request.json()
    const { name, email, password } = body

    console.log("üìã Dados recebidos:", { name, email, password: "***" })

    // Valida√ß√£o b√°sica
    if (!name || !email || !password) {
      console.log("‚ùå Campos obrigat√≥rios faltando")
      return NextResponse.json({ error: "Todos os campos s√£o obrigat√≥rios" }, { status: 400 })
    }

    if (password.length < 6) {
      console.log("‚ùå Senha muito curta")
      return NextResponse.json({ error: "A senha deve ter pelo menos 6 caracteres" }, { status: 400 })
    }

    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      console.log("‚ùå Email inv√°lido")
      return NextResponse.json({ error: "Email inv√°lido" }, { status: 400 })
    }

    if (USE_DATABASE) {
      console.log("üóÑÔ∏è Tentando usar banco de dados...")
      try {
        const { createUser, findUserByEmail } = await import("@/lib/auth")

        const existingUser = await findUserByEmail(email)
        if (existingUser) {
          console.log("‚ùå Email j√° existe no banco")
          return NextResponse.json({ error: "Este email j√° est√° cadastrado" }, { status: 409 })
        }

        const newUser = await createUser(name, email, password)
        if (!newUser) {
          console.log("‚ùå Erro ao criar usu√°rio no banco")
          return NextResponse.json({ error: "Erro ao criar usu√°rio no banco de dados" }, { status: 500 })
        }

        console.log("‚úÖ Usu√°rio criado no banco com sucesso")
        return NextResponse.json({
          message: "Usu√°rio criado com sucesso",
          user: { id: newUser.id, name: newUser.name, email: newUser.email },
        })
      } catch (dbError) {
        console.error("‚ùå Erro no banco, usando fallback:", dbError)
        // Continuar com dados em mem√≥ria se houver erro no banco
      }
    }

    console.log("üíæ Usando armazenamento em mem√≥ria...")

    // Verificar se email j√° existe na mem√≥ria
    const existingUser = memoryUsers.find((u) => u.email === email)
    if (existingUser) {
      console.log("‚ùå Email j√° existe na mem√≥ria")
      return NextResponse.json({ error: "Este email j√° est√° cadastrado" }, { status: 409 })
    }

    // Criar novo usu√°rio na mem√≥ria
    const newUser = {
      id: Date.now(),
      name,
      email,
      password, // Em produ√ß√£o, use hash
      created_at: new Date().toISOString(),
    }

    memoryUsers.push(newUser)
    console.log("‚úÖ Usu√°rio criado na mem√≥ria:", { id: newUser.id, name, email })

    return NextResponse.json({
      message: "Usu√°rio criado com sucesso (modo demo)",
      user: { id: newUser.id, name: newUser.name, email: newUser.email },
    })
  } catch (error) {
    console.error("‚ùå Erro geral no registro:", error)
    return NextResponse.json(
      {
        error: "Erro interno do servidor",
        details: process.env.NODE_ENV === "development" ? error.message : undefined,
      },
      { status: 500 },
    )
  }
}

// Endpoint para listar usu√°rios (apenas para debug)
export async function GET() {
  if (process.env.NODE_ENV !== "production") {
    return NextResponse.json({
      message: "Usu√°rios em mem√≥ria (apenas desenvolvimento)",
      users: memoryUsers.map((u) => ({ id: u.id, name: u.name, email: u.email })),
    })
  }

  return NextResponse.json({ error: "N√£o autorizado" }, { status: 401 })
}
