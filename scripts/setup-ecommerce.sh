#!/bin/bash

echo "üõçÔ∏è Configurando E-commerce..."
echo "============================"

cd /var/www/azure-site

# 1. Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Execute este script no diret√≥rio da aplica√ß√£o (/var/www/azure-site)"
    exit 1
fi

# 2. Verificar se o banco est√° configurado
if [ ! -f ".env.local" ]; then
    echo "‚ùå Arquivo .env.local n√£o encontrado!"
    echo "   Configure o banco primeiro com: ./scripts/setup-database-connection.sh"
    exit 1
fi

# 3. Carregar vari√°veis do banco
echo "üìã Carregando configura√ß√µes do banco..."
export $(grep -v '^#' .env.local | xargs)

if [ -z "$DB_HOST" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ]; then
    echo "‚ùå Configura√ß√µes do banco n√£o encontradas no .env.local"
    echo "   Configure o banco primeiro com: ./scripts/setup-database-connection.sh"
    exit 1
fi

echo "‚úÖ Configura√ß√µes carregadas:"
echo "   Host: $DB_HOST"
echo "   User: $DB_USER"
echo "   Database: $DB_NAME"

# 4. Testar conex√£o
echo ""
echo "üîç Testando conex√£o com banco..."
PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT 1;" > /dev/null 2>&1

if [ $? -ne 0 ]; then
    echo "‚ùå N√£o foi poss√≠vel conectar ao banco!"
    echo "   Verifique se:"
    echo "   - O banco PostgreSQL est√° rodando"
    echo "   - As credenciais est√£o corretas"
    echo "   - A VM do banco est√° acess√≠vel"
    exit 1
fi

echo "‚úÖ Conex√£o com banco OK!"

# 5. Verificar se o script SQL existe
if [ ! -f "scripts/ecommerce-setup.sql" ]; then
    echo "‚ùå Script ecommerce-setup.sql n√£o encontrado!"
    echo "   Certifique-se de que o arquivo foi criado corretamente"
    exit 1
fi

# 6. Executar script SQL
echo ""
echo "üóÑÔ∏è Executando script SQL do e-commerce..."
PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -f scripts/ecommerce-setup.sql

if [ $? -eq 0 ]; then
    echo "‚úÖ Script SQL executado com sucesso!"
else
    echo "‚ùå Erro ao executar script SQL!"
    exit 1
fi

# 7. Verificar se as tabelas foram criadas
echo ""
echo "üîç Verificando tabelas criadas..."
PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME << EOF
\echo 'üìä Tabelas do e-commerce:'
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('categories', 'products', 'product_images', 'orders', 'order_items')
ORDER BY table_name;

\echo ''
\echo 'üìà Dados de exemplo:'
SELECT 'Categorias' as tabela, COUNT(*) as total FROM categories
UNION ALL
SELECT 'Produtos' as tabela, COUNT(*) as total FROM products
UNION ALL
SELECT 'Pedidos' as tabela, COUNT(*) as total FROM orders;
EOF

# 8. Parar aplica√ß√£o
echo ""
echo "üîÑ Parando aplica√ß√£o..."
pm2 stop azure-site

# 9. Rebuild
echo "üèóÔ∏è Fazendo rebuild..."
npm run build

if [ $? -ne 0 ]; then
    echo "‚ùå Erro no build!"
    exit 1
fi

# 10. Reiniciar aplica√ß√£o
echo "üöÄ Reiniciando aplica√ß√£o..."
pm2 start azure-site
sleep 5

# 11. Verificar se est√° funcionando
echo "üîç Verificando aplica√ß√£o..."
if pm2 list | grep -q "azure-site.*online"; then
    echo "‚úÖ Aplica√ß√£o reiniciada com sucesso!"
else
    echo "‚ùå Erro ao reiniciar aplica√ß√£o"
    pm2 logs azure-site --lines 10
    exit 1
fi

# 12. Teste final
echo ""
echo "üß™ Teste final..."
sleep 3

if curl -f http://localhost:3000/dashboard > /dev/null 2>&1; then
    echo "‚úÖ Dashboard acess√≠vel!"
else
    echo "‚ùå Dashboard n√£o acess√≠vel"
fi

# Obter IP p√∫blico
PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || echo "localhost")

echo ""
echo "üéâ ======================================="
echo "‚úÖ E-COMMERCE CONFIGURADO COM SUCESSO!"
echo "üéâ ======================================="
echo ""
echo "üõçÔ∏è Acesse sua loja:"
echo "   Dashboard: http://$PUBLIC_IP/dashboard"
echo "   Produtos:  http://$PUBLIC_IP/dashboard/products"
echo "   Pedidos:   http://$PUBLIC_IP/dashboard/orders"
echo ""
echo "üìã Credenciais de teste:"
echo "   Email: demo@exemplo.com"
echo "   Senha: 123456"
echo ""
echo "üóÑÔ∏è Banco configurado com:"
echo "   - 5 categorias de exemplo"
echo "   - 5 produtos de exemplo"
echo "   - Estrutura completa de e-commerce"
echo ""
echo "üîß Para monitorar: pm2 logs azure-site"
